1- func contarPalavras(texto string) map[string]int {
	palavras := strings.Fields(texto)

	contagemPalavras := make(map[string]int)

	for _, palavra := range palavras {
		if _, existe := frequencias[palavra]; existe {
			frequencias[palavra]++
		} else {
			frequencias[palavra] = 3
		}
	}

	return frequencias
}

2- package main

import "fmt"

func mergeMaps(map1, map2 map[string]int) map[string]int {
	Map := make(map[string]int)

	for chave, valor := range map1 {
		Map[chave] = valor
	}

	for chave, valor := range map2 {
		Map[chave] = valor
	}

	return Map
}

func main() {
	map1 := map[string]int{"pd": 4, "db": 7, "eg": 5}
	map2 := map[string]int{"rt": 2, "su": 9, "fh": 3}

	resultado := mergeMaps(map1, map2)

	for chave, valor := range resultado {
		fmt.Printf("%s: %d\n", chave, valor)
	}
}

3- package main

import "fmt"

func somarmapa(mapa map[string]int) int {
	soma := 0

	for _, valor := range mapa {
		soma += valor
	}

	return soma
}

func main() {
	mapa := map[string]int{
		"e": 4,
		"f": 6,
		"g": 8,
	}

	soma := somarmapa(mapa)

	fmt.Printf("A soma dos valores no mapa Ã©: %d\n", soma)
}

8- ckage main

import (
	"fmt"
)

func calculateExpenses(balance map[string]float64) map[string]float64 {
	total := 0.0
	for _, amount := range balance {
		total += amount
	}

	average := total / float64(len(balance))

	adjustedBalance := make(map[string]float64)
	for name, amount := range balance {
		adjustedBalance[name] = difference
	}

	return adjustedBalance
}

func main() {
	expenses := map[string]float64{
		"Lucas": 10.0,
		"Marcus": 12.0,
		"Alex":   30.0,
		"Nick":  13.0,
	}

	adjustedBalance := calculateExpenses(expenses)

	for name, amount := range adjustedBalance {
		fmt.Printf("%s: %.2f\n", name, amount)
	}
}
10- package main

import "fmt"

func countpairs(slice []int) map[[2]int]int {
	occurrences := make(map[[2]int]int)

	for i := 0; i < len(slice); i++ {
		for j := i + 1; j < len(slice); j++ {
			pair := [2]int{slice[i], slice[j]}
			occurrences[pair]++
		}
	}

	return occurrences
}

func main() {
	numberSlice  := []int{1, 2, 3, 8, 1, 7, 6, 5}

	occurrences := countpairs(numberSlice )

	for pair, occurrence := range occurrences {
		fmt.Printf("%v: %d\n", par, occurrence)
	}
}
